-- ===================================================
-- PARAMETRO IN
-- ===================================================


/* Funcion con error */
CREATE OR REPLACE FUNCTION SCOTT.FN_DOBLE
( P_NUM IN NUMBER ) RETURN NUMBER
AS
BEGIN
  P_NUM := P_NUM * 2;
  RETURN P_NUM;
END;


CREATE OR REPLACE FUNCTION SCOTT.FN_DOBLE
( P_NUM IN NUMBER ) RETURN NUMBER
AS
  V_DOBLE NUMBER;
BEGIN
  V_DOBLE := P_NUM * 2;
  RETURN V_DOBLE;
END;


SELECT scott.fn_doble( 60.0 ) FROM DUAL;


-- ===================================================
-- USO DE NOCOPY
-- ===================================================

-- SIN NOCOPY

CREATE OR REPLACE PROCEDURE SCOTT.PR_DOBLE
( P_NUM IN NUMBER, P_DOBLE OUT NUMBER )
AS
  V_ERROR EXCEPTION;
BEGIN
  P_DOBLE := P_NUM * 2;
  IF( P_NUM < 100 ) THEN
    RAISE V_ERROR;
  END IF;
END;

DECLARE 
  V_NUM NUMBER := 100;
  V_DOBLE NUMBER := 6666666;
BEGIN
  DBMS_OUTPUT.PUT_LINE('NUM: ' || V_NUM);
  DBMS_OUTPUT.PUT_LINE('DOBLE: ' || V_DOBLE);
  SCOTT.PR_DOBLE(V_NUM, V_DOBLE);
  DBMS_OUTPUT.PUT_LINE('A. NUM: ' || V_NUM);
  DBMS_OUTPUT.PUT_LINE('A. DOBLE: ' || V_DOBLE);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('B. NUM: ' || V_NUM);
    DBMS_OUTPUT.PUT_LINE('B. DOBLE: ' || V_DOBLE);
END;
  

-- CON NOCOPY

CREATE OR REPLACE PROCEDURE SCOTT.PR_DOBLE
( P_NUM IN NUMBER, P_DOBLE OUT NOCOPY NUMBER )
AS
  V_ERROR EXCEPTION;
BEGIN
  P_DOBLE := P_NUM * 2;
  IF( P_NUM < 100 ) THEN
    RAISE V_ERROR;
  END IF;
END;

DECLARE 
  V_NUM NUMBER := 50;
  V_DOBLE NUMBER := 6666666;
BEGIN
  DBMS_OUTPUT.PUT_LINE('NUM: ' || V_NUM);
  DBMS_OUTPUT.PUT_LINE('DOBLE: ' || V_DOBLE);
  SCOTT.PR_DOBLE(V_NUM, V_DOBLE);
  DBMS_OUTPUT.PUT_LINE('A. NUM: ' || V_NUM);
  DBMS_OUTPUT.PUT_LINE('A. DOBLE: ' || V_DOBLE);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('B. NUM: ' || V_NUM);
    DBMS_OUTPUT.PUT_LINE('B. DOBLE: ' || V_DOBLE);
END;
  


